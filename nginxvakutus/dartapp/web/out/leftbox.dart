// Auto-generated from leftbox.html.
// DO NOT EDIT.

library x_leftbox;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'dart:html';
import 'package:web_ui/web_ui.dart';
import 'dart:async';
import '../domains.dart';
import 'package:js/js.dart' as js;
import 'package:jsonp/jsonp.dart' as jsonp;
import 'package:intl/intl.dart';



List<ForMark> forMarkList;

List<Navigation> navigationList = new List<Navigation>();
//Navigation startNavigation = new Navigation();

final __changes = new __observe.Observable();

bool __$menu = false;
bool get menu {
  if (__observe.observeReads) {
    __observe.notifyRead(__changes, __observe.ChangeRecord.FIELD, 'menu');
  }
  return __$menu;
}
set menu(bool value) {
  if (__observe.hasObservers(__changes)) {
    __observe.notifyChange(__changes, __observe.ChangeRecord.FIELD, 'menu',
        __$menu, value);
  }
  __$menu = value;
}

class LeftBoxComponent extends WebComponent {
  /** Autogenerated from the template. */

  autogenerated.ScopedCssMapper _css;

  /** This field is deprecated, use getShadowRoot instead. */
  get _root => getShadowRoot("x-leftbox");
  static final __html1 = new autogenerated.Element.html('<div>\n          <i class="icon-spinner icon-spin icon-3x"></i>         \n        </div>', treeSanitizer: autogenerated.nullTreeSanitizer), __html2 = new autogenerated.Element.html('<div class="scroll-view">\n        <template></template>\n        \n       </div>', treeSanitizer: autogenerated.nullTreeSanitizer), __html3 = new autogenerated.Element.html('<ul class="nav nav-list">            \n               <li><a></a></li>             \n         </ul>', treeSanitizer: autogenerated.nullTreeSanitizer), __html4 = new autogenerated.Element.html('<i class="icon-ok"></i>', treeSanitizer: autogenerated.nullTreeSanitizer), __shadowTemplate = new autogenerated.DocumentFragment.html('''
        
        <template></template>
        
      <template></template>
 
     ''', treeSanitizer: autogenerated.nullTreeSanitizer);
  autogenerated.Element __e2, __e8;
  autogenerated.Template __t;

  void created_autogenerated() {
    var __root = createShadowRoot("x-leftbox");
    setScopedCss("x-leftbox", new autogenerated.ScopedCssMapper({"x-leftbox":"[is=\"x-leftbox\"]"}));
    _css = getScopedCss("x-leftbox");
    __t = new autogenerated.Template(__root);
    __root.nodes.add(__shadowTemplate.clone(true));
    __e2 = __root.nodes[1];
    __t.conditional(__e2, () => !menu, (__t) {
    __t.addAll([new autogenerated.Text('\n        '),
        __html1.clone(true),
        new autogenerated.Text('  \n      ')]);
    });

    __e8 = __root.nodes[3];
    __t.conditional(__e8, () => menu, (__t) {
      var __e6, __e7;
      __e7 = __html2.clone(true);
      __e6 = __e7.nodes[1];
      __t.loop(__e6, () => navigationList, ($list, $index, __t) {
        var navigation = $list[$index];
        var __e4, __e5;
        __e5 = __html3.clone(true);
        __e4 = __e5.nodes[1].nodes[0];
        var __binding3 = __t.contentBind(() => navigation.SubThemes, false);
        __e4.nodes.addAll([__html4.clone(true),
            __binding3]);
        __t.listen(__e4.onClick, ($event) { selectSubThemes(navigation); });
      __t.addAll([new autogenerated.Text('\n                  \n         '),
          __e5,
          new autogenerated.Text('\n           \n          '),
          new autogenerated.Text('\n       '),
          new autogenerated.Text('\n          \n          \n           \n        ')]);
      });
    __t.addAll([new autogenerated.Text('\n        '),
        __e7,
        new autogenerated.Text(' \n      ')]);
    });

    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e2 = __e8 = null;
  }

  /** Original code from the component. */

  
  var forMarkList = new List<ForMark>();
  var centralboxxtag;
  
  void setUp(Element centralboxElement,List<Navigation> navigationListFirst){
 
    navigationList = navigationListFirst;

    centralboxxtag = centralboxElement.xtag;
    
    Future<js.Proxy> result = jsonp.fetch(
        uri: "http://suomipornome2.appspot.com/jsonout?locale=fi_FI&themes=finances&subthemes=Ulkomaat&callback=?"
          
    );
    result.then((js.Proxy proxy) {
               
      for (var i=0;i < proxy["results"].length;i++){
        
        ForMark forMark = new ForMark();
        
        forMark.Description = proxy["results"][i]["Description"];
        DateTime pubDate = DateTime.parse(proxy["results"][i]["PubDate"]);
        var timeStamp = new DateFormat("d-MMM-yyyy");
        String pubDateStr = timeStamp.format(pubDate);
        forMark.PubDate = pubDateStr;
        forMark.Title = proxy["results"][i]["Title"];
        forMark.ImageLink = proxy["results"][i]["ImageLink"];
        forMark.Cont = proxy["results"][i]["Cont"];
        forMarkList.add(forMark);
      }
      js.release(proxy); 
      centralboxxtag.setUpMenu(forMarkList);
      var stream = getForMarkStream(forMarkList);
      stream.pipe(centralboxxtag);
      
    });
    
  }
  
  void streamStoped(){

    menu = true;
    
  }
  
  Stream<ForMark> getForMarkStream(List<ForMark> listForMark) {
    
    var controller = new StreamController<ForMark>();
    var quanttopull = listForMark.length -3;
    new Timer.periodic(new Duration(seconds:4), (timer) {
      
      if (listForMark.length > quanttopull) {
        var message = listForMark.removeAt(0); // pull the first message of the list
        controller.add(message); // add to the stream
      }
      else {
        // no more messages
        controller.close(); // close the stream
        
        timer.cancel(); // cancel the timer
      }
    });
    
    return controller.stream;
  }

  selectSubThemes(navigationIns){
       
    menu = false;
    String subthemes =navigationIns.SubThemes;
    String themes = navigationIns.Themes;
    String locale =navigationIns.Locale;
    var url = "http://suomipornome2.appspot.com/jsonout?locale="+locale+"&themes="+themes+"&subthemes="+subthemes+"&callback=?";
    
    Future<js.Proxy> result = jsonp.fetch(
//        uri: "http://suomipornome2.appspot.com/jsonout?locale=fi_FI&themes=finances&subthemes=Ulkomaat&callback=?"
        uri: url
          
    );
    result.then((js.Proxy proxy) {
      forMarkList.clear();
      
      
      for (var i=0;i < proxy["results"].length;i++){
        
        ForMark forMark = new ForMark();
        
        forMark.Description = proxy["results"][i]["Description"];
        DateTime pubDate = DateTime.parse(proxy["results"][i]["PubDate"]);
        var timeStamp = new DateFormat("d-MMM-yyyy");
        String pubDateStr = timeStamp.format(pubDate);
        forMark.PubDate = pubDateStr;
        forMark.Title = proxy["results"][i]["Title"];
        forMark.ImageLink = proxy["results"][i]["ImageLink"];
        forMark.Cont = proxy["results"][i]["Cont"];
        forMarkList.add(forMark);
      }
      js.release(proxy); 
      
      centralboxxtag.setUpMenu(forMarkList);
      centralboxxtag.clearMessages();
      
      var stream = getForMarkStream(forMarkList);

      stream.pipe(centralboxxtag);
      
      
    }); 
    

  }
     
}
//# sourceMappingURL=leftbox.dart.map