// Auto-generated from centralbox.html.
// DO NOT EDIT.

library x_centralbox;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'dart:html';
import 'package:web_ui/web_ui.dart';
import 'dart:async';
import '../domains.dart';



List messages = toObservable(new List());
List<ForMark> forMarkList;

final __changes = new __observe.Observable();

bool __$start = false;
bool get start {
  if (__observe.observeReads) {
    __observe.notifyRead(__changes, __observe.ChangeRecord.FIELD, 'start');
  }
  return __$start;
}
set start(bool value) {
  if (__observe.hasObservers(__changes)) {
    __observe.notifyChange(__changes, __observe.ChangeRecord.FIELD, 'start',
        __$start, value);
  }
  __$start = value;
}
bool __$firstSomeNews = false;
bool get firstSomeNews {
  if (__observe.observeReads) {
    __observe.notifyRead(__changes, __observe.ChangeRecord.FIELD, 'firstSomeNews');
  }
  return __$firstSomeNews;
}
set firstSomeNews(bool value) {
  if (__observe.hasObservers(__changes)) {
    __observe.notifyChange(__changes, __observe.ChangeRecord.FIELD, 'firstSomeNews',
        __$firstSomeNews, value);
  }
  __$firstSomeNews = value;
}
bool __$menu = false;
bool get menu {
  if (__observe.observeReads) {
    __observe.notifyRead(__changes, __observe.ChangeRecord.FIELD, 'menu');
  }
  return __$menu;
}
set menu(bool value) {
  if (__observe.hasObservers(__changes)) {
    __observe.notifyChange(__changes, __observe.ChangeRecord.FIELD, 'menu',
        __$menu, value);
  }
  __$menu = value;
}
bool __$popupcell = false;
bool get popupcell {
  if (__observe.observeReads) {
    __observe.notifyRead(__changes, __observe.ChangeRecord.FIELD, 'popupcell');
  }
  return __$popupcell;
}
set popupcell(bool value) {
  if (__observe.hasObservers(__changes)) {
    __observe.notifyChange(__changes, __observe.ChangeRecord.FIELD, 'popupcell',
        __$popupcell, value);
  }
  __$popupcell = value;
}

ForMark forMarkOne;

Completer completer = new Completer();

class CentralBoxComponent extends WebComponent implements StreamConsumer {
  /** Autogenerated from the template. */

  autogenerated.ScopedCssMapper _css;

  /** This field is deprecated, use getShadowRoot instead. */
  get _root => getShadowRoot("x-centralbox");
  static final __html1 = new autogenerated.Element.tag('template'), __html10 = new autogenerated.Element.html('<div class="scroll-view"></div>', treeSanitizer: autogenerated.nullTreeSanitizer), __html11 = new autogenerated.Element.html('<img class="imgCont">', treeSanitizer: autogenerated.nullTreeSanitizer), __html2 = new autogenerated.Element.html('<div>\n              <i class="icon-quote-left icon-4x icon-muted pull-left"></i>\n              <div class="well-large">\n            \n                <p class="muted"></p><p>\n              </p></div> \n            <div class="scroll-view"></div> \n            \n           \n          </div>', treeSanitizer: autogenerated.nullTreeSanitizer), __html3 = new autogenerated.Element.html('<img class="imgCont">', treeSanitizer: autogenerated.nullTreeSanitizer), __html4 = new autogenerated.Element.tag('template'), __html5 = new autogenerated.Element.html('<ul class="nav nav-list"> \n              <div class="centralboxmenu">      \n              <li><a></a></li>\n             </div>                     \n            </ul>', treeSanitizer: autogenerated.nullTreeSanitizer), __html6 = new autogenerated.Element.html('<i class="icon-ok"></i>', treeSanitizer: autogenerated.nullTreeSanitizer), __html7 = new autogenerated.Element.html('<i class="icon-quote-left icon-4x icon-muted pull-left"></i>', treeSanitizer: autogenerated.nullTreeSanitizer), __html8 = new autogenerated.Element.html('<button class="close pull-right"><h1>Ã—</h1></button>', treeSanitizer: autogenerated.nullTreeSanitizer), __html9 = new autogenerated.Element.html('<div class="well-large">\n            \n                <p class="muted"></p><p>\n              </p></div>', treeSanitizer: autogenerated.nullTreeSanitizer), __shadowTemplate = new autogenerated.DocumentFragment.html('''
        
        <template></template>
        
        <template></template>  
        
        
        <template></template>  
                     
                
        
      <!--   <template instantiate="if completer.isCompleted"> -->
     <!--    <template instantiate="if quantMessages !=null">-->
       <!--    <div>{{quantMessages}} messages</div>-->
          
      <!--   </template>-->
                 
        
      ''', treeSanitizer: autogenerated.nullTreeSanitizer);
  autogenerated.Element __e16, __e22, __e30;
  autogenerated.Template __t;

  void created_autogenerated() {
    var __root = createShadowRoot("x-centralbox");
    setScopedCss("x-centralbox", new autogenerated.ScopedCssMapper({"x-centralbox":"[is=\"x-centralbox\"]"}));
    _css = getScopedCss("x-centralbox");
    __t = new autogenerated.Template(__root);
    __root.nodes.add(__shadowTemplate.clone(true));
    __e16 = __root.nodes[1];
    __t.conditional(__e16, () => firstSomeNews, (__t) {
      var __e15;
      __e15 = __html1.clone(true);
      __t.loop(__e15, () => messages, ($list, $index, __t) {
        var message = $list[$index];
        var __e10, __e11, __e13, __e14;
        __e14 = __html2.clone(true);
        __e10 = __e14.nodes[3].nodes[1];
        var __binding9 = __t.contentBind(() => message.Description, false);
        __e10.nodes.add(__binding9);
        __e13 = __e14.nodes[5];
        __e11 = __html3.clone(true);
        __t.oneWayBind(() => message.ImageLink, (e) { if (__e11.src != e) __e11.src = e; }, false, true);
        var __binding12 = __t.contentBind(() => message.Cont, false);
        __e13.nodes.addAll([new autogenerated.Text('\n                '),
            __e11,
            new autogenerated.Text('\n                '),
            __binding12,
            new autogenerated.Text('\n             ')]);
      __t.addAll([new autogenerated.Text('  \n        \n          '),
          __e14,
          new autogenerated.Text('\n          \n          ')]);
      });
    __t.addAll([new autogenerated.Text('\n          '),
        __e15,
        new autogenerated.Text('\n        ')]);
    });

    __e22 = __root.nodes[3];
    __t.conditional(__e22, () => menu, (__t) {
      var __e21;
      __e21 = __html4.clone(true);
      __t.loop(__e21, () => forMarkList, ($list, $index, __t) {
        var forMark = $list[$index];
        var __e19, __e20;
        __e20 = __html5.clone(true);
        __e19 = __e20.nodes[1].nodes[1].nodes[0];
        var __binding17 = __t.contentBind(() => forMark.PubDate, false);
        var __binding18 = __t.contentBind(() => forMark.Title, false);
        __e19.nodes.addAll([__html6.clone(true),
            __binding17,
            new autogenerated.Text(' '),
            __binding18]);
        __t.listen(__e19.onClick, ($event) { openpopupcell(forMark); });
      __t.addAll([new autogenerated.Text('\n            \n            \n            '),
          __e20,
          new autogenerated.Text('\n            \n          '),
          new autogenerated.Text('\n            \n          ')]);
      });
    __t.addAll([new autogenerated.Text('\n          \n          '),
        __e21,
        new autogenerated.Text('  \n          \n        ')]);
    });

    __e30 = __root.nodes[5];
    __t.conditional(__e30, () => popupcell, (__t) {
      var __e23, __e25, __e26, __e27, __e29;
      __e23 = __html8.clone(true);
      __t.listen(__e23.onClick, ($event) { returnToNavigation(); });
      __e26 = __html9.clone(true);
      __e25 = __e26.nodes[1];
      var __binding24 = __t.contentBind(() => forMarkOne.Description, false);
      __e25.nodes.add(__binding24);
      __e29 = __html10.clone(true);
      __e27 = __html11.clone(true);
      __t.oneWayBind(() => forMarkOne.ImageLink, (e) { if (__e27.src != e) __e27.src = e; }, false, true);
      var __binding28 = __t.contentBind(() => forMarkOne.Cont, false);
      __e29.nodes.addAll([new autogenerated.Text('\n                '),
          __e27,
          new autogenerated.Text('\n                '),
          __binding28,
          new autogenerated.Text('\n              ')]);
    __t.addAll([new autogenerated.Text('\n        \n          '),
        __e23,
        new autogenerated.Text('\n               \n              '),
        __html7.clone(true),
        new autogenerated.Text('\n              '),
        __e26,
        new autogenerated.Text(' \n            \n  \n              '),
        __e29,
        new autogenerated.Text('     \n         \n        ')]);
    });

    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e16 = __e22 = __e30 = null;
  }

  /** Original code from the component. */
  
     
  var leftboxxtag;
  
  void setUp(Element leftbox){

    leftboxxtag = leftbox.xtag;

  }
  
  void setUpMenu(List<ForMark> listForMark){
    
    if(!start) {
      forMarkList = listForMark;
    } else {
    
     forMarkList = listForMark;
      menu = true;
      start =true;
//      popupcell=false;
      
    }
    
  }
  
  close() {
    print("Close");

  }
  
  void clearMessages(){
    
    messages.clear();
    popupcell=false;
    
  }
  
  Future addStream(Stream stream)  {
    
      stream.listen(_onMessage,onError: _onError,onDone: _onDone,cancelOnError: true);
    
    return completer.future;
      
  }
  
  _onMessage(message) {
    
    if (!firstSomeNews) {
      firstSomeNews = true;
    }
    if (menu){
      menu = false;
      
    }
    if (messages.length ==1) {
      var messagelast = messages.removeAt(0);
      
    }
    
    messages.add(message); // add a ChatMessage to the list
    
  }
  
  _onError(error) {
    
    print("Error: $error");
  }
  
  _onDone() {
    
    print("complite");
    firstSomeNews=false;
    menu = true;
    
    leftboxxtag.streamStoped();

  }
  
 void openpopupcell(formarkIns){
 
      forMarkOne = formarkIns;
      popupcell=true;
      menu=false;    
  }
 
 void returnToNavigation(){
   
   popupcell=false;
   menu=true;
 
 }
  
}
//# sourceMappingURL=centralbox.dart.map